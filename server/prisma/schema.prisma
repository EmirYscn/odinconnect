generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MEDIA_TYPE {
  IMAGE
  VIDEO
  AUDIO
}

model Profile {
  id       String  @id @default(uuid())
  bio      String? // User's bio
  location String? // User's location
  website  String? // User's personal website or blog

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique // One-to-one relationship with User
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  displayName String? // User's display name
  username String  @unique
  password String?
  avatar   String? // Direct URL to avatar image

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete timestamp

  resetPasswordToken   String?   @unique // Token for password reset
  resetPasswordExpires DateTime? // Expiration date for the token

  posts   Post[] // One-to-many relationship with Post
  likes   Like[] // One-to-many relationship with Like
  comments Comment[] // One-to-many relationship with Comment
  medias  Media[] // One-to-many relationship with Media
  profile Profile? // One-to-one relationship with Profile

  // Relations
  following    UserFollowing[] @relation("Following")
  followers    UserFollowing[] @relation("Followers")
  blockedUsers UserBlocked[]   @relation("BlockedUsers")
  blockedBy    UserBlocked[]   @relation("BlockedBy")

  userSettings UserSettings?
}

model UserFollowing {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  follower  User @relation("Following", fields: [followerId], references: [id])
  following User @relation("Followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model UserBlocked {
  id            String @id @default(uuid())
  userId        String
  blockedUserId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User @relation("BlockedUsers", fields: [userId], references: [id])
  blockedUser User @relation("BlockedBy", fields: [blockedUserId], references: [id])

  @@unique([userId, blockedUserId])
}

model UserSettings {
  id String @id @default(uuid())

  notifications Boolean @default(true) // Whether the user wants notifications

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique // One-to-one relationship with User
}

model Post {
  id      String @id @default(uuid())
  content String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete timestamp

  published Boolean @default(true) // Whether the post is published or not

  user   User   @relation(fields: [userId], references: [id])
  userId String

  medias Media[] // One-to-many relationship with Media
  comments Comment[] // One-to-many relationship with Comment
  likes   Like[] // One-to-many relationship with Like
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String

  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String?

  replies   Comment[] @relation("CommentReplies")
  likes     Like[]
}

model Media {
  id   String     @id @default(uuid())
  url  String // Direct URL to the media file
  type MEDIA_TYPE // Type of media (e.g., image, video, audio)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
